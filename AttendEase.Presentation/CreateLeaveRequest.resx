<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox2.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAASUVORK5CYII=
</value>
  </data>
</root>